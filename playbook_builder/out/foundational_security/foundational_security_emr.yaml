connections:
  aws: aws_connection
desc: This section contains recommendations for configuring EMR resources.
inputs:
  send_notif:
    default: true
    display_name: Send Slack Notification
    required: true
    type: checkbox
name: foundational_security_emr
outputs:
  S2: '{{steps.S2.output}}'
  check_name: foundational_security_emr
  execution_url: '{{execution_url}}'
steps:
- desc: example description delete afterwards
  text: '# 1 Amazon EMR cluster master nodes should not have public IP addresses'
- text: This control checks whether master nodes on Amazon EMR clusters have public
    IP addresses. The control fails if the master node has public IP addresses that
    are associated with any of its instances. Public IP addresses are designated in
    the PublicIp field of the NetworkInterfaces configuration for the instance. This
    control only checks Amazon EMR clusters that are in a RUNNING or WAITING state.
- action: core.sql
  desc: Description
  id: S1
  inputs:
    sql: " \n select\n  -- Required Columns\n  c.cluster_arn as resource,\n  case\n\
      \    when json_extract(c.status,'$.State') not in ('RUNNING', 'WAITING') then\
      \ 'skip'\n    when s.map_public_ip_on_launch then 'alarm'\n    else 'ok'\n \
      \ end as status,\n  case\n    when json_extract(c.status,'$.State') not in ('RUNNING',\
      \ 'WAITING') then c.title || ' is in ' || (json_extract(c.status,'$.State'))\
      \ || ' state.'\n    when s.map_public_ip_on_launch then c.title || ' master\
      \ nodes assigned with public IP.'\n    else c.title || ' master nodes not assigned\
      \ with public IP.'\n  end as reason,\n  -- Additional Dimensions\n  c.region,\n\
      \  c.account_id\nfrom\n  aws_emr_cluster as c\n  left join aws_vpc_subnet as\
      \ s on json_extract(c.ec2_instance_attributes,'$.Ec2SubnetId') = s.subnet_id;\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S2
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S1.output.rows if ( x[context.steps.S1.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S1.output.rows

      check.name = "1 Amazon EMR cluster master nodes should not have public IP addresses"

      check.severity = "high"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: ' '
  text: '# Send Report to communication channel'
- action: core.python
  desc: Description
  id: FormatResult
  inputs:
    code: "from dotmap import DotMap\nfrom datetime import date\nimport json\n\ntoday\
      \ = \"*\" + str(date.today()) +\"*\"\n\nmessage_blocks = []\nexecution_url =\
      \ context.server_environment_url + \"/workspace/\" + context.workspace_id +\
      \ \"/playbooks/library/playbook?id=\" + context.playbook_id + \"&execution=\"\
      \ + context.execution_id \nheader = {\"type\": \"header\", \"text\": {\"type\"\
      : \"plain_text\",\"text\": \":speaker:  foundational_security_emr  :speaker:\"\
      }}\ncontext_section = {\"type\":\"context\",\"elements\":[{\"text\": today+\"\
      \ |  foundational_security_emr Check results \",\"type\":\"mrkdwn\"}]}\nblink_execution\
      \ = {\"type\":\"section\",\"text\":{\"text\": \":point_right: <\" + execution_url\
      \ + \"| *Full report available in Blink*>\" ,\"type\":\"mrkdwn\"}}\nmessage_blocks.append(header)\n\
      message_blocks.append(context_section)\nmessage_blocks.append(blink_execution)\n\
      \nstep_ids = ['S2']\nfor id in step_ids:\n  if context.steps[id].status == 'OK':\n\
      \    message_blocks.append({\"type\":\"divider\"})\n    \n    section = DotMap()\n\
      \    section.type = \"section\"\n    section.text = DotMap()\n    section.text.type\
      \ = \"mrkdwn\"\n    section.text.text = \"\"\n    if context.steps[id].output.isAlarm:\n\
      \      section.text.text +=  \":x: \"\n    else:\n       section.text.text +=\
      \  \":white_check_mark: \"\n    \n    section.text.text += context.steps[id].output.name[:82]\
      \ + \"\\n\" if len(context.steps[id].output.name) > 82 else context.steps[id].output.name\n\
      \    \n\n    message_blocks.append(section.toDict().copy())\n\n  \nprint(json.dumps(message_blocks))"
  name: Format Final Result
- action: slack.SendMessage
  connections:
    slack: slack_connection
  id: SendResult
  inputs:
    Blocks: '{{steps.FormatResult.output}}'
    Channel: random
    Text: ''
  name: Send report to clack channel
  when: '{{inputs.send_notif}}'
tags:
- AWS
- Compliance
- emr
type: Subflow.playbook
