connections:
  aws: aws_connection
desc: ''
name: foundational_security_cloudtrail
steps:
- desc: example description delete afterwards
  description: This control checks that there is at least one multi-Region CloudTrail
    trail.
  text: '#1 CloudTrail should be enabled and configured with at least one multi-Region
    trail'
- action: core.sql
  desc: Description
  id: S1
  inputs:
    sql: " \n with multi_region_trails as (\n  select\n    count(account_id) as count,\n\
      \    group_concat(account_id, ',') as account_id\n  from\n    aws_cloudtrail_trail\n\
      \  where\n    is_multi_region_trail\n    and is_logging\n  group by\n    is_multi_region_trail\n\
      )\nselect\n  -- Required Columns\n  a.arn as resource,\n  case\n    when b.count\
      \ < 1 then 'alarm'\n    else 'ok'\n  end as status,\n  a.title || ' has ' ||\
      \ coalesce(b.count, 0) || ' multi-region trail(s).' as reason,\n  -- Additional\
      \ Dimensions\n  a.account_id\nfrom\n  aws_account as a\nleft join multi_region_trails\
      \ as b on a.account_id = split_part(b.account_id, ',', 1);\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S2
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S1.output.rows if ( x[context.steps.S1.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S1.output.rows

      check.name = "#1 CloudTrail should be enabled and configured with at least one
      multi-Region trail"

      check.severity = "high"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  description: This control checks whether CloudTrail is configured to use the server-side
    encryption (SSE) AWS Key Management Service customer master key (CMK) encryption.
    The check passes if the KmsKeyId is defined.
  text: '#2 CloudTrail should have encryption at rest enabled'
- action: core.sql
  desc: Description
  id: S3
  inputs:
    sql: " \n select\n  -- Required columns\n  arn as resource,\n  case\n    when\
      \ kms_key_id is null then 'alarm'\n    else 'ok'\n  end as status,\n  case\n\
      \    when kms_key_id is null then title || ' logs are not encrypted at rest.'\n\
      \    else title || ' logs are encrypted at rest.'\n  end as reason,\n  -- Additional\
      \ columns\n  region,\n  account_id\nfrom\n  aws_cloudtrail_trail;"
  name: Perform the query
- action: core.python
  desc: Description
  id: S4
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S3.output.rows if ( x[context.steps.S3.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S3.output.rows

      check.name = "#2 CloudTrail should have encryption at rest enabled"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  description: This control checks whether log file integrity validation is enabled
    on a CloudTrail trail. CloudTrail log file validation creates a digitally signed
    digest file that contains a hash of each log that CloudTrail writes to Amazon
    S3. You can use these digest files to determine whether a log file was changed,
    deleted, or unchanged after CloudTrail delivered the log.
  text: '#4 Ensure CloudTrail log file validation is enabled'
- action: core.sql
  desc: Description
  id: S5
  inputs:
    sql: " \n select\n  -- Required Columns\n  arn as resource,\n  case\n    when\
      \ log_file_validation_enabled then 'ok'\n    else 'alarm'\n  end as status,\n\
      \  case\n    when log_file_validation_enabled then title || ' log file validation\
      \ enabled.'\n    else title || ' log file validation disabled.'\n  end as reason,\n\
      \  -- Additional Dimensions\n  region,\n  account_id\nfrom\n  aws_cloudtrail_trail;"
  name: Perform the query
- action: core.python
  desc: Description
  id: S6
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S5.output.rows if ( x[context.steps.S5.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S5.output.rows

      check.name = "#4 Ensure CloudTrail log file validation is enabled"

      check.severity = "low"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  description: This control checks whether CloudTrail trails are configured to send
    logs to CloudWatch Logs. The control fails if the CloudWatchLogsLogGroupArn property
    of the trail is empty.
  text: '#5 Ensure CloudTrail trails are integrated with Amazon CloudWatch Logs'
- action: core.sql
  desc: Description
  id: S7
  inputs:
    sql: " \n select\n  -- Required Columns\n  arn as resource,\n  case\n    when\
      \ log_group_arn != 'null' and ((latest_delivery_time) > current_date - 1) then\
      \ 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when log_group_arn !=\
      \ 'null' and ((latest_delivery_time) > current_date - 1) then title || ' integrated\
      \ with CloudWatch logs.'\n    else title || ' not integrated with CloudWatch\
      \ logs.'\n  end as reason,\n  -- Additional Dimensions\n  region,\n  account_id\n\
      from\n  aws_cloudtrail_trail;"
  name: Perform the query
- action: core.python
  desc: Description
  id: S8
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S7.output.rows if ( x[context.steps.S7.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S7.output.rows

      check.name = "#5 Ensure CloudTrail trails are integrated with Amazon CloudWatch
      Logs"

      check.severity = "low"


      print(json.dumps(check.toDict()))'
  name: Format Result
- action: core.python
  desc: Description
  id: FormatResult
  inputs:
    code: "from dotmap import DotMap\nfrom datetime import date\nimport json\n\ntoday\
      \ = \"*\" + str(date.today()) +\"*\"\n\nmessage_blocks = []\nheader = {\"type\"\
      : \"header\", \"text\": {\"type\": \"plain_text\",\"text\": \":speaker:  foundational_security_cloudtrail\
      \  :speaker:\"}}\ncontext_section = {\"type\":\"context\",\"elements\":[{\"\
      text\": today+\" |  foundational_security_cloudtrail Check results \",\"type\"\
      :\"mrkdwn\"}]}\n\nmessage_blocks.append(header)\nmessage_blocks.append(context_section)\n\
      \nstep_ids = ['S2', 'S4', 'S6', 'S8']\nfor id in step_ids:\n  if context.steps[id].status\
      \ == 'OK':\n    message_blocks.append({\"type\":\"divider\"})\n    \n    section\
      \ = DotMap()\n    section.type = \"section\"\n    section.text = DotMap()\n\
      \    section.text.type = \"mrkdwn\"\n    section.text.text = \"\"\n    if context.steps[id].output.isAlarm:\n\
      \      section.text.text +=  \":x: \"\n    else:\n       section.text.text +=\
      \  \":white_check_mark: \"\n    \n    section.text.text += context.steps[id].output.name[:82]\
      \ + \"\\n\"\n    \n\n    message_blocks.append(section.toDict().copy())\n\n\
      \  \nprint(json.dumps(message_blocks))"
  name: Format Final Result
- action: slack.SendMessage
  connectiuon:
    slack: slack_connection
  id: SendResult
  inputs:
    Blocks: '{{steps.FormatResult.output}}'
    Channel: demo
    Text: ''
  name: Send report to clack channel
tags: []
type: Flow
