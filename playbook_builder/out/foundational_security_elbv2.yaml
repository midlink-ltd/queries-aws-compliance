connections:
  aws: aws_connection
desc: ''
name: foundational_security_elbv2
steps:
- desc: example description delete afterwards
  description: This control checks whether HTTP to HTTPS redirection is configured
    on all HTTP listeners of Application Load Balancers. The check fails if one or
    more HTTP listeners of Application Load Balancers do not have HTTP to HTTPS redirection
    configured.
  text: '#1 Application Load Balancer should be configured to redirect all HTTP requests
    to HTTPS'
- action: core.sql
  desc: Description
  id: S1
  inputs:
    sql: " \n with detailed_listeners as (\n  select\n    arn,\n    load_balancer_arn,\n\
      \    protocol\n  from\n    aws_ec2_load_balancer_listener,\n    json_each(default_actions)\
      \ as ac\n  where\n    split_part(arn,'/',2) = 'app'\n    and protocol = 'HTTP'\n\
      \    and json_extract(ac.value,'$.Type') = 'redirect'\n    and json_extract(ac.value,'$.RedirectConfig.Protocol')\
      \ = 'HTTPS'\n)\nselect\n  -- Required Columns\n  a.arn as resource,\n  case\n\
      \    when b.load_balancer_arn is null then 'alarm'\n    else 'ok'\n  end as\
      \ status,\n   case\n    when b.load_balancer_arn is not null then  a.title ||\
      \ ' associated with HTTP redirection.'\n    else a.title || ' not associated\
      \ with HTTP redirection.'\n  end as reason,\n  -- Additional Dimensions\n  a.region,\n\
      \  a.account_id\nfrom\n  aws_ec2_application_load_balancer a\n  left join detailed_listeners\
      \ b on a.arn = b.load_balancer_arn;"
  name: Perform the query
- action: core.python
  desc: Description
  id: S2
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S1.output.rows if ( x[context.steps.S1.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S1.output.rows

      check.name = "#1 Application Load Balancer should be configured to redirect
      all HTTP requests to HTTPS"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- action: core.python
  desc: Description
  id: FormatResult
  inputs:
    code: "from dotmap import DotMap\nfrom datetime import date\nimport json\n\ntoday\
      \ = \"*\" + str(date.today()) +\"*\"\n\nmessage_blocks = []\nheader = {\"type\"\
      : \"header\", \"text\": {\"type\": \"plain_text\",\"text\": \":speaker:  foundational_security_elbv2\
      \  :speaker:\"}}\ncontext_section = {\"type\":\"context\",\"elements\":[{\"\
      text\": today+\" |  foundational_security_elbv2 Check results \",\"type\":\"\
      mrkdwn\"}]}\n\nmessage_blocks.append(header)\nmessage_blocks.append(context_section)\n\
      \nstep_ids = ['S2']\nfor id in step_ids:\n  if context.steps[id].status == 'OK':\n\
      \    message_blocks.append({\"type\":\"divider\"})\n    \n    section = DotMap()\n\
      \    section.type = \"section\"\n    section.text = DotMap()\n    section.text.type\
      \ = \"mrkdwn\"\n    section.text.text = \"\"\n    if context.steps[id].output.isAlarm:\n\
      \      section.text.text +=  \":x: \"\n    else:\n       section.text.text +=\
      \  \":white_check_mark: \"\n    \n    section.text.text += context.steps[id].output.name[:82]\
      \ + \"\\n\"\n    \n\n    message_blocks.append(section.toDict().copy())\n\n\
      \  \nprint(json.dumps(message_blocks))"
  name: Format Final Result
- action: slack.SendMessage
  connectiuon:
    slack: slack_connection
  id: SendResult
  inputs:
    Blocks: '{{steps.FormatResult.output}}'
    Channel: jon-demo
    Text: ''
  name: Send report to clack channel
tags: []
type: Flow
