connections:
  aws: aws_connection
desc: ''
name: foundational_security_secretsmanager
steps:
- desc: example description delete afterwards
  description: This control checks whether a secret stored in AWS Secrets Manager
    is configured with automatic rotation. Secrets Manager helps you improve the security
    posture of your organization. Secrets include database credentials, passwords,
    and third-party API keys. You can use Secrets Manager to store secrets centrally,
    encrypt secrets automatically, control access to secrets, and rotate secrets safely
    and automatically.
  text: '#1 Secrets Manager secrets should have automatic rotation enabled'
- action: core.sql
  desc: Description
  id: S1
  inputs:
    sql: " \n select\n  -- Required Columns\n  arn as resource,\n  case\n    when\
      \ rotation_rules is null then 'alarm'\n    else 'ok'\n  end as status,\n  case\n\
      \    when rotation_rules is null then title || ' automatic rotation not enabled.'\n\
      \    else title || ' automatic rotation enabled.'\n  end as reason,\n  -- Additional\
      \ Dimensions\n  region,\n  account_id\nfrom\n  aws_secretsmanager_secret;\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S2
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S1.output.rows if ( x[context.steps.S1.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S1.output.rows

      check.name = "#1 Secrets Manager secrets should have automatic rotation enabled"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  text: '#2 Secrets Manager secrets configured with automatic rotation should rotate
    successfully - Not implemented'
- action: core.sql
  desc: Description
  id: S3
  inputs:
    sql: Select * from true
  name: Perform the query
  when: 'False'
- action: core.python
  desc: Description
  id: S4
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S3.output.rows if ( x[context.steps.S3.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S3.output.rows

      check.name = "#2 Secrets Manager secrets configured with automatic rotation
      should rotate successfully - Not implemented"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
  when: 'False'
- desc: example description delete afterwards
  description: This control checks whether your secrets have been accessed within
    a specified number of days. The default value is 90 days. If a secret was accessed
    even once within the defined number of days, this control fails.
  text: '#3 Remove unused Secrets Manager secrets'
- action: core.sql
  desc: Description
  id: S5
  inputs:
    sql: " \n select\n  -- Required Columns\n  arn as resource,\n  case\n    when\
      \ date(last_accessed_date) - date(created_date) >= 1 then 'ok'\n    else 'alarm'\n\
      \  end as status,\n  case\n    when date(last_accessed_date)- date(created_date)\
      \ >= 1 then title || ' recently used.'\n    else title || ' not used recently.'\n\
      \  end as reason,\n  -- Additional Dimensions\n  region,\n  account_id\nfrom\n\
      \  aws_secretsmanager_secret;\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S6
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S5.output.rows if ( x[context.steps.S5.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S5.output.rows

      check.name = "#3 Remove unused Secrets Manager secrets"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  description: This control checks whether your secrets have been rotated at least
    once within 90 days. Rotating secrets can help you to reduce the risk of an unauthorized
    use of your secrets in your AWS account. Examples include database credentials,
    passwords, third-party API keys, and even arbitrary text. If you do not change
    your secrets for a long period of time, the secrets are more likely to be compromised.
  text: '#4 Secrets Manager secrets should be rotated within a specified number of
    days'
- action: core.sql
  desc: Description
  id: S7
  inputs:
    sql: " \n select\n  -- Required Columns\n  arn as resource,\n  case\n    when\
      \ rotation_rules is not null and rotation_lambda_arn is not null then 'ok'\n\
      \    else 'alarm'\n  end as status,\n  case\n    when rotation_rules is not\
      \ null and rotation_lambda_arn is not null then title || ' scheduled for rotation\
      \ using Lambda function.'\n    else title || ' automatic rotation using Lambda\
      \ function disabled.'\n  end as reason,\n  -- Additional Dimensions\n  region,\n\
      \  account_id\nfrom\n  aws_secretsmanager_secret;\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S8
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S7.output.rows if ( x[context.steps.S7.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S7.output.rows

      check.name = "#4 Secrets Manager secrets should be rotated within a specified
      number of days"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- action: core.python
  desc: Description
  id: FormatResult
  inputs:
    code: "from dotmap import DotMap\nfrom datetime import date\nimport json\n\ntoday\
      \ = \"*\" + str(date.today()) +\"*\"\n\nmessage_blocks = []\nheader = {\"type\"\
      : \"header\", \"text\": {\"type\": \"plain_text\",\"text\": \":speaker:  foundational_security_secretsmanager\
      \  :speaker:\"}}\ncontext_section = {\"type\":\"context\",\"elements\":[{\"\
      text\": today+\" |  foundational_security_secretsmanager Check results \",\"\
      type\":\"mrkdwn\"}]}\n\nmessage_blocks.append(header)\nmessage_blocks.append(context_section)\n\
      \nstep_ids = ['S2', 'S4', 'S6', 'S8']\nfor id in step_ids:\n  if context.steps[id].status\
      \ == 'OK':\n    message_blocks.append({\"type\":\"divider\"})\n    \n    section\
      \ = DotMap()\n    section.type = \"section\"\n    section.text = DotMap()\n\
      \    section.text.type = \"mrkdwn\"\n    section.text.text = \"\"\n    if context.steps[id].output.isAlarm:\n\
      \      section.text.text +=  \":x: \"\n    else:\n       section.text.text +=\
      \  \":white_check_mark: \"\n    \n    section.text.text += context.steps[id].output.name[:82]\
      \ + \"\\n\"\n    \n\n    message_blocks.append(section.toDict().copy())\n\n\
      \  \nprint(json.dumps(message_blocks))"
  name: Format Final Result
- action: slack.SendMessage
  connectiuon:
    slack: slack_connection
  id: SendResult
  inputs:
    Blocks: '{{steps.FormatResult.output}}'
    Channel: jon-demo
    Text: ''
  name: Send report to clack channel
tags: []
type: Flow
