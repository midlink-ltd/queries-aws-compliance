connections:
  aws: aws_connection
desc: ''
name: foundational_security_sns
steps:
- desc: example description delete afterwards
  description: This control checks whether an SNS topic is encrypted at rest using
    AWS KMS.
  text: '#1 SNS topics should be encrypted at rest using AWS KMS'
- action: core.sql
  desc: Description
  id: S1
  inputs:
    sql: " \n select\n  -- Required Columns\n  topic_arn as resource,\ncase\n  when\
      \ kms_master_key_id is null then 'alarm'\n  else 'ok'\nend as status,\ncase\n\
      \  when kms_master_key_id is null then title || ' encryption at rest disabled.'\n\
      \  else title || ' encryption at rest enabled.'\nend as reason,\n  -- Additional\
      \ Dimensions\n  region,\n  account_id\nfrom\n  aws_sns_topic;\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S2
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S1.output.rows if ( x[context.steps.S1.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S1.output.rows

      check.name = "#1 SNS topics should be encrypted at rest using AWS KMS"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- action: core.python
  desc: Description
  id: FormatResult
  inputs:
    code: "from dotmap import DotMap\nfrom datetime import date\nimport json\n\ntoday\
      \ = \"*\" + str(date.today()) +\"*\"\n\nmessage_blocks = []\nheader = {\"type\"\
      : \"header\", \"text\": {\"type\": \"plain_text\",\"text\": \":speaker:  foundational_security_sns\
      \  :speaker:\"}}\ncontext_section = {\"type\":\"context\",\"elements\":[{\"\
      text\": today+\" |  foundational_security_sns Check results \",\"type\":\"mrkdwn\"\
      }]}\n\nmessage_blocks.append(header)\nmessage_blocks.append(context_section)\n\
      \nstep_ids = ['S2']\nfor id in step_ids:\n  if context.steps[id].status == 'OK':\n\
      \    message_blocks.append({\"type\":\"divider\"})\n    \n    section = DotMap()\n\
      \    section.type = \"section\"\n    section.text = DotMap()\n    section.text.type\
      \ = \"mrkdwn\"\n    steps = context.steps\n    section.text.text = context.steps[id].output.name[:72].ljust(72,\
      \ ' ') + \" ... \"\n    if context.steps[id].output.isAlarm:\n      section.text.text\
      \ +=  \" :x:\\n\".rjust(91 - len(section.text.text),' ')\n    else:\n      \
      \ section.text.text +=  \" :white_check_mark:\\n\".rjust(91 - len(section.text.text),'\
      \ ')\n    message_blocks.append(section.toDict().copy())\n\n  \nprint(json.dumps(message_blocks))"
  name: Format Final Result
- action: slack.SendMessage
  connectiuon:
    slack: slack_connection
  id: SendResult
  inputs:
    Blocks: '{{steps.FormatResult.output}}'
    Channel: jon-demo
    Text: ''
  name: Send report to clack channel
tags: []
type: Flow
