connections:
  aws: aws_connection
desc: ''
name: foundational_security_elb
steps:
- desc: example description delete afterwards
  description: This control checks whether your Classic Load Balancer listeners are
    configured with HTTPS or TLS protocol for front-end (client to load balancer)
    connections. The control is applicable if a Classic Load Balancer has listeners.
    If your Classic Load Balancer does not have a listener configured, then the control
    does not report any findings. The control passes if the Classic Load Balancer
    listeners are configured with TLS or HTTPS for front-end connections. The control
    fails if the listener is not configured with TLS or HTTPS for front-end connections.
  text: '#3 Classic Load Balancer listeners should be configured with HTTPS or TLS
    termination'
- action: core.sql
  desc: Description
  id: S1
  inputs:
    sql: " \n select\n  -- Required Columns\n  'arn:' || partition || ':elasticloadbalancing:'\
      \ || region || ':' || account_id || ':loadbalancer/' || title as resource,\n\
      \  case\n    when json_extract(listener_description.value,'$.Listener.Protocol')\
      \ in ('HTTPS', 'SSL', 'TLS') then 'ok'\n    else 'alarm'\n  end as status,\n\
      \  case\n    when json_extract(listener_description.value,'$.Listener.Protocol')\
      \ = 'HTTPS' then title || ' configured with HTTPS protocol.'\n    when json_extract(listener_description.value,'$.Listener.Protocol')\
      \ = 'SSL' then title || ' configured with TLS protocol.'\n    else title ||\
      \ ' configured with ' || (json_extract(listener_description.value,'$.Listener.Protocol'))\
      \ || ' protocol.'\n  end as reason,\n  -- Additional Dimensions\n  region,\n\
      \  account_id\nfrom\n  aws_ec2_classic_load_balancer,\n  json_each(listener_descriptions)\
      \ as listener_description;"
  name: Perform the query
- action: core.python
  desc: Description
  id: S2
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S1.output.rows if ( x[context.steps.S1.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S1.output.rows

      check.name = "#3 Classic Load Balancer listeners should be configured with HTTPS
      or TLS termination"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  text: '#4 Application load balancers should be configured to drop HTTP headers -
    Not implemented'
- action: core.sql
  desc: Description
  id: S3
  inputs:
    sql: ''
  name: Perform the query
- action: core.python
  desc: Description
  id: S4
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S3.output.rows if ( x[context.steps.S3.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S3.output.rows

      check.name = "#4 Application load balancers should be configured to drop HTTP
      headers - Not implemented"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  text: '#5 Application and Classic Load Balancers logging should be enabled - Not
    implemented'
- action: core.sql
  desc: Description
  id: S5
  inputs:
    sql: ''
  name: Perform the query
- action: core.python
  desc: Description
  id: S6
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S5.output.rows if ( x[context.steps.S5.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S5.output.rows

      check.name = "#5 Application and Classic Load Balancers logging should be enabled
      - Not implemented"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  text: '#6 Application Load Balancer deletion protection should be enabled - Not
    implemented'
- action: core.sql
  desc: Description
  id: S7
  inputs:
    sql: ''
  name: Perform the query
- action: core.python
  desc: Description
  id: S8
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S7.output.rows if ( x[context.steps.S7.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S7.output.rows

      check.name = "#6 Application Load Balancer deletion protection should be enabled
      - Not implemented"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- action: core.python
  desc: Description
  id: FormatResult
  inputs:
    code: "from dotmap import DotMap\nfrom datetime import date\nimport json\n\ntoday\
      \ = \"*\" + str(date.today()) +\"*\"\n\nmessage_blocks = []\nheader = {\"type\"\
      : \"header\", \"text\": {\"type\": \"plain_text\",\"text\": \":speaker:  foundational_security_elb\
      \  :speaker:\"}}\ncontext_section = {\"type\":\"context\",\"elements\":[{\"\
      text\": today+\" |  foundational_security_elb Check results \",\"type\":\"mrkdwn\"\
      }]}\n\nmessage_blocks.append(header)\nmessage_blocks.append(context_section)\n\
      \nstep_ids = ['S2', 'S4', 'S6', 'S8']\nfor id in step_ids:\n  if context.steps[id].status\
      \ == 'OK':\n    message_blocks.append({\"type\":\"divider\"})\n    \n    section\
      \ = DotMap()\n    section.type = \"section\"\n    section.text = DotMap()\n\
      \    section.text.type = \"mrkdwn\"\n    steps = context.steps\n    section.text.text\
      \ = context.steps[id].output.name[:72].ljust(72, ' ') + \" ... \"\n    if context.steps[id].output.isAlarm:\n\
      \      section.text.text +=  \" :x:\\n\".rjust(91 - len(section.text.text),'\
      \ ')\n    else:\n       section.text.text +=  \" :white_check_mark:\\n\".rjust(91\
      \ - len(section.text.text),' ')\n    message_blocks.append(section.toDict().copy())\n\
      \n  \nprint(json.dumps(message_blocks))"
  name: Format Final Result
- action: slack.SendMessage
  connectiuon:
    slack: slack_connection
  id: SendResult
  inputs:
    Blocks: '{{steps.FormatResult.output}}'
    Channel: jon-demo
    Text: ''
  name: Send report to clack channel
tags: []
type: Flow
