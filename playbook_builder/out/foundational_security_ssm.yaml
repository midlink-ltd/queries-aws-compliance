connections:
  aws: aws_connection
desc: ''
name: foundational_security_ssm
steps:
- desc: example description delete afterwards
  description: This control checks whether the EC2 instances in your account are managed
    by AWS Systems Manager. Systems Manager is an AWS service that you can use to
    view and control your AWS infrastructure. To help you to maintain security and
    compliance, Systems Manager scans your managed instances. A managed instance is
    a machine that is configured for use with Systems Manager. Systems Manager then
    reports or takes corrective action on any policy violations that it detects. Systems
    Manager also helps you to configure and maintain your managed instances.
  text: '#1 EC2 instances should be managed by AWS Systems Manager'
- action: core.sql
  desc: Description
  id: S1
  inputs:
    sql: " \n select\n  -- Required Columns\n  i.arn as resource,\n  case\n    when\
      \ m.instance_id is null then 'alarm'\n    else 'ok'\n  end as status,\n  case\n\
      \    when m.instance_id is null then i.title || ' not managed by AWS SSM.'\n\
      \    else i.title || ' managed by AWS SSM.'\n  end as reason,\n  -- Additional\
      \ Dimentions\n  i.region,\n  i.account_id\nfrom\n  aws_ec2_instance i\n  left\
      \ join aws_ssm_managed_instance m on m.instance_id = i.instance_id;\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S2
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S1.output.rows if ( x[context.steps.S1.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S1.output.rows

      check.name = "#1 EC2 instances should be managed by AWS Systems Manager"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  description: This control checks whether the compliance status of the Amazon EC2
    Systems Manager patch compliance is COMPLIANT or NON_COMPLIANT after the patch
    installation on the instance. It only checks instances that are managed by Systems
    Manager Patch Manager.
  text: '#2 All EC2 instances managed by Systems Manager should be compliant with
    patching requirements'
- action: core.sql
  desc: Description
  id: S3
  inputs:
    sql: " \n select\n  -- Required Columns\n  id as resource,\n  case\n    when c.status\
      \ = 'COMPLIANT' then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when\
      \ c.status = 'COMPLIANT' then c.resource_id || ' patch ' || c.title || ' is\
      \ compliant.'\n    else c.resource_id || ' patch ' || c.title || ' is non-compliant.'\n\
      \  end as reason,\n  -- Additional Dimensions\n  c.region,\n  c.account_id\n\
      from\n  aws_ssm_managed_instance as i,\n  aws_ssm_managed_instance_compliance\
      \ as c\nwhere\n  c.resource_id = i.instance_id\n  and c.compliance_type = 'Patch';"
  name: Perform the query
- action: core.python
  desc: Description
  id: S4
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S3.output.rows if ( x[context.steps.S3.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S3.output.rows

      check.name = "#2 All EC2 instances managed by Systems Manager should be compliant
      with patching requirements"

      check.severity = "high"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  description: This control checks whether the status of the AWS Systems Manager association
    compliance is COMPLIANT or NON_COMPLIANT after the association is run on an instance.
    The control passes if the association compliance status is COMPLIANT.
  text: '#3 Instances managed by Systems Manager should have an association compliance
    status of COMPLIANT'
- action: core.sql
  desc: Description
  id: S5
  inputs:
    sql: " \n select\n  -- Required Columns\n  id as resource,\n  case\n    when c.status\
      \ = 'COMPLIANT' then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when\
      \ c.status = 'COMPLIANT' then c.resource_id || ' association ' || c.title ||\
      \ ' is compliant.'\n    else c.resource_id || ' association ' || c.title ||\
      \ ' is non-compliant.'\n  end as reason,\n  -- Additional Dimensions\n  c.region,\n\
      \  c.account_id\nfrom\n  aws_ssm_managed_instance as i,\n  aws_ssm_managed_instance_compliance\
      \ as c\nwhere\n  c.resource_id = i.instance_id\n  and c.compliance_type = 'Association';"
  name: Perform the query
- action: core.python
  desc: Description
  id: S6
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S5.output.rows if ( x[context.steps.S5.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S5.output.rows

      check.name = "#3 Instances managed by Systems Manager should have an association
      compliance status of COMPLIANT"

      check.severity = "low"


      print(json.dumps(check.toDict()))'
  name: Format Result
- action: core.python
  desc: Description
  id: FormatResult
  inputs:
    code: "from dotmap import DotMap\nfrom datetime import date\nimport json\n\ntoday\
      \ = \"*\" + str(date.today()) +\"*\"\n\nmessage_blocks = []\nheader = {\"type\"\
      : \"header\", \"text\": {\"type\": \"plain_text\",\"text\": \":speaker:  foundational_security_ssm\
      \  :speaker:\"}}\ncontext_section = {\"type\":\"context\",\"elements\":[{\"\
      text\": today+\" |  foundational_security_ssm Check results \",\"type\":\"mrkdwn\"\
      }]}\n\nmessage_blocks.append(header)\nmessage_blocks.append(context_section)\n\
      \nstep_ids = ['S2', 'S4', 'S6']\nfor id in step_ids:\n  if context.steps[id].status\
      \ == 'OK':\n    message_blocks.append({\"type\":\"divider\"})\n    \n    section\
      \ = DotMap()\n    section.type = \"section\"\n    section.text = DotMap()\n\
      \    section.text.type = \"mrkdwn\"\n    steps = context.steps\n    section.text.text\
      \ = context.steps[id].output.name[:72].ljust(72, ' ') + \" ... \"\n    if context.steps[id].output.isAlarm:\n\
      \      section.text.text +=  \" :x:\\n\".rjust(91 - len(section.text.text),'\
      \ ')\n    else:\n       section.text.text +=  \" :white_check_mark:\\n\".rjust(91\
      \ - len(section.text.text),' ')\n    message_blocks.append(section.toDict().copy())\n\
      \n  \nprint(json.dumps(message_blocks))"
  name: Format Final Result
- action: slack.SendMessage
  connectiuon:
    slack: slack_connection
  id: SendResult
  inputs:
    Blocks: '{{steps.FormatResult.output}}'
    Channel: jon-demo
    Text: ''
  name: Send report to clack channel
tags: []
type: Flow
