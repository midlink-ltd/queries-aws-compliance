connections:
  aws: aws_connection
desc: This section contains recommendations for configuring CloudTrail resources and
  options.
inputs:
  send_notif:
    default: true
    display_name: Send Slack Notification
    required: true
    type: checkbox
name: pci_v321_cloudtrail
outputs:
  S2: '{{steps.S2.output}}'
  S4: '{{steps.S4.output}}'
  S6: '{{steps.S6.output}}'
  S8: '{{steps.S8.output}}'
  check_name: pci_v321_cloudtrail
  execution_url: '{{execution_url}}'
steps:
- desc: example description delete afterwards
  text: '# 1 CloudTrail logs should be encrypted at rest using AWS KMS CMKs'
- text: This control checks whether AWS CloudTrail is configured to use the server-side
    encryption (SSE) AWS KMS customer master key (CMK) encryption. If you are only
    using the default encryption option, you can choose to disable this check.
- action: core.sql
  desc: Description
  id: S1
  inputs:
    sql: " \n select\n  -- Required columns\n  arn as resource,\n  case\n    when\
      \ kms_key_id is null then 'alarm'\n    else 'ok'\n  end as status,\n  case\n\
      \    when kms_key_id is null then title || ' logs are not encrypted at rest.'\n\
      \    else title || ' logs are encrypted at rest.'\n  end as reason,\n  -- Additional\
      \ columns\n  region,\n  account_id\nfrom\n  aws_cloudtrail_trail;"
  name: Perform the query
- action: core.python
  desc: Description
  id: S2
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S1.output.rows if ( x[context.steps.S1.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S1.output.rows

      check.name = "1 CloudTrail logs should be encrypted at rest using AWS KMS CMKs"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  text: '# 2 CloudTrail should be enabled'
- text: This control checks whether CloudTrail is enabled in your AWS account. However,
    some AWS services do not enable logging of all APIs and events. You should implement
    any additional audit trails other than CloudTrail and review the documentation
    for each service.
- action: core.sql
  desc: Description
  id: S3
  inputs:
    sql: " \n  with trail_details as (\n  select\n    name as trail_name,\n    arn,\n\
      \    is_multi_region_trail,\n    is_logging,\n    event_selectors,\n    json_extract(e.value,'$.ReadWriteType')\
      \ as read_write_type,\n    account_id,\n    region\n  from\n    aws_cloudtrail_trail,\n\
      \    json_each(event_selectors) as e\n)\nselect\n  -- Required Columns\n  arn\
      \ as resource,\n  case\n    when not trail_details.is_multi_region_trail then\
      \ 'alarm'\n    when not trail_details.is_logging then 'alarm'\n    when read_write_type\
      \ <> 'All' then 'alarm'\n    else 'ok'\n  end as status,\n  trail_details.trail_name\
      \ ||\n    case when trail_details.is_multi_region_trail then ' is ' else ' is\
      \ not ' end || 'multi-region,' ||\n    case when trail_details.is_logging then\
      \ ' logging enabled' else ' logging disabled' end ||\n    ' for ' || read_write_type\
      \ || ' events.'\n  as reason,\n  -- Additional Dimensions\n  region,\n  account_id\n\
      from\n  trail_details\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S4
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S3.output.rows if ( x[context.steps.S3.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S3.output.rows

      check.name = "2 CloudTrail should be enabled"

      check.severity = "high"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  text: '# 3 CloudTrail log file validation should be enabled'
- text: This control checks whether CloudTrail log file validation is enabled.
- action: core.sql
  desc: Description
  id: S5
  inputs:
    sql: " \n select\n  -- Required Columns\n  arn as resource,\n  case\n    when\
      \ log_file_validation_enabled then 'ok'\n    else 'alarm'\n  end as status,\n\
      \  case\n    when log_file_validation_enabled then title || ' log file validation\
      \ enabled.'\n    else title || ' log file validation disabled.'\n  end as reason,\n\
      \  -- Additional Dimensions\n  region,\n  account_id\nfrom\n  aws_cloudtrail_trail;"
  name: Perform the query
- action: core.python
  desc: Description
  id: S6
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S5.output.rows if ( x[context.steps.S5.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S5.output.rows

      check.name = "3 CloudTrail log file validation should be enabled"

      check.severity = "low"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  text: '# 4 CloudTrail trails should be integrated with CloudWatch Logs'
- text: This control checks whether CloudTrail trails are configured to send logs
    to CloudWatch Logs.
- action: core.sql
  desc: Description
  id: S7
  inputs:
    sql: " \n select\n  -- Required Columns\n  arn as resource,\n  case\n    when\
      \ log_group_arn != 'null' and ((latest_delivery_time) > current_date - 1) then\
      \ 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when log_group_arn !=\
      \ 'null' and ((latest_delivery_time) > current_date - 1) then title || ' integrated\
      \ with CloudWatch logs.'\n    else title || ' not integrated with CloudWatch\
      \ logs.'\n  end as reason,\n  -- Additional Dimensions\n  region,\n  account_id\n\
      from\n  aws_cloudtrail_trail;"
  name: Perform the query
- action: core.python
  desc: Description
  id: S8
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S7.output.rows if ( x[context.steps.S7.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S7.output.rows

      check.name = "4 CloudTrail trails should be integrated with CloudWatch Logs"

      check.severity = "low"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: ' '
  text: '# Send Report to communication channel'
- action: core.python
  desc: Description
  id: FormatResult
  inputs:
    code: "from dotmap import DotMap\nfrom datetime import date\nimport json\n\ntoday\
      \ = \"*\" + str(date.today()) +\"*\"\n\nmessage_blocks = []\nexecution_url =\
      \ context.server_environment_url + \"/workspace/\" + context.workspace_id +\
      \ \"/playbooks/library/playbook?id=\" + context.playbook_id + \"&execution=\"\
      \ + context.execution_id \nheader = {\"type\": \"header\", \"text\": {\"type\"\
      : \"plain_text\",\"text\": \":speaker:  pci_v321_cloudtrail  :speaker:\"}}\n\
      context_section = {\"type\":\"context\",\"elements\":[{\"text\": today+\" |\
      \  pci_v321_cloudtrail Check results \",\"type\":\"mrkdwn\"}]}\nblink_execution\
      \ = {\"type\":\"section\",\"text\":{\"text\": \":point_right: <\" + execution_url\
      \ + \"| *Full report available in Blink*>\" ,\"type\":\"mrkdwn\"}}\nmessage_blocks.append(header)\n\
      message_blocks.append(context_section)\nmessage_blocks.append(blink_execution)\n\
      \nstep_ids = ['S2', 'S4', 'S6', 'S8']\nfor id in step_ids:\n  if context.steps[id].status\
      \ == 'OK':\n    message_blocks.append({\"type\":\"divider\"})\n    \n    section\
      \ = DotMap()\n    section.type = \"section\"\n    section.text = DotMap()\n\
      \    section.text.type = \"mrkdwn\"\n    section.text.text = \"\"\n    if context.steps[id].output.isAlarm:\n\
      \      section.text.text +=  \":x: \"\n    else:\n       section.text.text +=\
      \  \":white_check_mark: \"\n    \n    section.text.text += context.steps[id].output.name[:82]\
      \ + \"\\n\" if len(context.steps[id].output.name) > 82 else context.steps[id].output.name\n\
      \    \n\n    message_blocks.append(section.toDict().copy())\n\n  \nprint(json.dumps(message_blocks))"
  name: Format Final Result
- action: slack.SendMessage
  connections:
    slack: slack_connection
  id: SendResult
  inputs:
    Blocks: '{{steps.FormatResult.output}}'
    Channel: random
    Text: ''
  name: Send report to clack channel
  when: '{{inputs.send_notif}}'
tags:
- AWS
- Compliance
- pci_v321
- cloudtrail
type: Subflow.playbook
