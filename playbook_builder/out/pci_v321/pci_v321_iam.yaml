connections:
  aws: aws_connection
desc: 'This section contains recommendations for configuring AWS IAM resources and
  options.

  '
inputs:
  send_notif:
    default: true
    display_name: Send Slack Notification
    required: true
    type: checkbox
name: pci_v321_iam
outputs:
  S10: '{{steps.S10.output}}'
  S12: '{{steps.S12.output}}'
  S14: '{{steps.S14.output}}'
  S16: '{{steps.S16.output}}'
  S2: '{{steps.S2.output}}'
  S4: '{{steps.S4.output}}'
  S6: '{{steps.S6.output}}'
  S8: '{{steps.S8.output}}'
  check_name: pci_v321_iam
  execution_url: '{{execution_url}}'
steps:
- desc: example description delete afterwards
  text: '# 1 IAM root user access key should not exist'
- text: This control checks whether user access keys exist for the root user.
- action: core.sql
  desc: Description
  id: S1
  inputs:
    sql: " \n select\n  -- Required Columns\n  'arn:' || partition || ':::' || account_id\
      \ as resource,\n  case\n    when account_access_keys_present > 0 then 'alarm'\n\
      \    else 'ok'\n  end status,\n  case\n    when account_access_keys_present\
      \ > 0 then 'Root user access keys exist.'\n    else 'No root user access keys\
      \ exist.'\n  end reason,\n  -- Additional Dimensions\n  account_id\nfrom\n \
      \ aws_iam_account_summary;\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S2
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S1.output.rows if ( x[context.steps.S1.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S1.output.rows

      check.name = "1 IAM root user access key should not exist"

      check.severity = "critical"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  text: '# 2 IAM users should not have IAM policies attached'
- text: This control checks that none of your IAM users have policies attached. IAM
    users must inherit permissions from IAM groups or roles. It does not check whether
    least privileged policies are applied to IAM roles and groups.
- action: core.sql
  desc: Description
  id: S3
  inputs:
    sql: " \n select\n  -- Required Columns\n  arn as resource,\n  case\n    when\
      \ inline_policies is null and attached_policy_arns is null then 'ok'\n    else\
      \ 'alarm'\n  end status,\n  name || ' has ' || coalesce(jsonb_array_length(inline_policies),0)\
      \ || ' inline and ' ||\n    coalesce(jsonb_array_length(attached_policy_arns),0)\
      \ || ' directly attached policies.' as reason,\n  -- Additional Dimensions\n\
      \  account_id\nfrom\n  aws_iam_user;\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S4
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S3.output.rows if ( x[context.steps.S3.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S3.output.rows

      check.name = "2 IAM users should not have IAM policies attached"

      check.severity = "low"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  text: '#3 IAM policies should not allow full ''*'' administrative privileges - Not
    implemented'
- text: 'This control checks whether the default version of AWS Identity and Access
    Management policies (also known as customer managed policies) do not have administrator
    access with a statement that has ''Effect'': ''Allow'' with ''Action'': ''*''
    over ''Resource'': ''*''.'
- action: core.sql
  desc: Description
  id: S5
  inputs:
    sql: Select * from true
  name: Perform the query
  when: 'False'
- action: core.python
  desc: Description
  id: S6
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S5.output.rows if ( x[context.steps.S5.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S5.output.rows

      check.name = "3 IAM policies should not allow full ''*'' administrative privileges"

      check.severity = "high"


      print(json.dumps(check.toDict()))'
  name: Format Result
  when: 'False'
- desc: example description delete afterwards
  text: '# 4 Hardware MFA should be enabled for the root user'
- text: This control checks whether your AWS account is enabled to use multi-factor
    authentication (MFA) hardware device to sign in with root user credentials. It
    does not check whether you are using virtual MFA.
- action: core.sql
  desc: Description
  id: S7
  inputs:
    sql: " \n select\n  -- Required Columns\n  'arn:' || s.partition || ':::' || s.account_id\
      \ as resource,\n  case\n    when account_mfa_enabled and serial_number is null\
      \ then 'ok'\n    else 'alarm'\n  end status,\n  case\n    when account_mfa_enabled\
      \ = false then  'MFA not enabled for root account.'\n    when serial_number\
      \ is not null then 'Virtual MFA device enabled the root account.'\n    else\
      \ 'Hardware MFA device enabled for root account.'\n  end reason,\n  -- Additional\
      \ Dimensions\n  s.account_id\nfrom\n  aws_iam_account_summary as s\n  left join\
      \ aws_iam_virtual_mfa_device on serial_number = 'arn:' || s.partition || ':iam::'\
      \ || s.account_id || ':mfa/root-account-mfa-device'"
  name: Perform the query
- action: core.python
  desc: Description
  id: S8
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S7.output.rows if ( x[context.steps.S7.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S7.output.rows

      check.name = "4 Hardware MFA should be enabled for the root user"

      check.severity = "critical"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  text: '# 5 Virtual MFA should be enabled for the root user'
- text: This control checks whether users of your AWS account require a multi-factor
    authentication (MFA) device to sign in with root user credentials. It does not
    check whether you are using hardware MFA.
- action: core.sql
  desc: Description
  id: S9
  inputs:
    sql: " \n select\n  -- Required Columns\n  'arn:' || s.partition || ':::' || s.account_id\
      \ as resource,\n  case\n    when account_mfa_enabled and serial_number is not\
      \ null then 'ok'\n    else 'alarm'\n  end status,\n  case\n    when account_mfa_enabled\
      \ = false then 'MFA is not enabled for the root user.'\n    when serial_number\
      \ is null then 'MFA is enabled for the root user, but the MFA associated with\
      \ the root user is a hardware device.'\n    else 'Virtual MFA enabled for the\
      \ root user.'\n  end reason,\n  -- Additional Dimensions\n  s.account_id\nfrom\n\
      \  aws_iam_account_summary as s\n  left join aws_iam_virtual_mfa_device on serial_number\
      \ = 'arn:' || s.partition || ':iam::' || s.account_id || ':mfa/root-account-mfa-device';"
  name: Perform the query
- action: core.python
  desc: Description
  id: S10
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S9.output.rows if ( x[context.steps.S9.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S9.output.rows

      check.name = "5 Virtual MFA should be enabled for the root user"

      check.severity = "critical"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: example description delete afterwards
  text: '#6 MFA should be enabled for all IAM users - Not implemented'
- text: This control checks whether the IAM users have multi-factor authentication
    (MFA) enabled.
- action: core.sql
  desc: Description
  id: S11
  inputs:
    sql: Select * from true
  name: Perform the query
  when: 'False'
- action: core.python
  desc: Description
  id: S12
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S11.output.rows if ( x[context.steps.S11.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S11.output.rows

      check.name = "6 MFA should be enabled for all IAM users"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
  when: 'False'
- desc: example description delete afterwards
  text: '#7 IAM user credentials should be disabled if not used within a predefined
    number of days - Not implemented'
- text: This control checks whether your IAM users have passwords or active access
    keys that have not been used within a specified number of days. The default is
    90 days.
- action: core.sql
  desc: Description
  id: S13
  inputs:
    sql: Select * from true
  name: Perform the query
  when: 'False'
- action: core.python
  desc: Description
  id: S14
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S13.output.rows if ( x[context.steps.S13.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S13.output.rows

      check.name = "7 IAM user credentials should be disabled if not used within a
      predefined number of days"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
  when: 'False'
- desc: example description delete afterwards
  text: '# 8 Password policies for IAM users should have strong configurations'
- text: This control checks whether the account password policy for IAM users uses
    the following minimum PCI DSS configurations.
- action: core.sql
  desc: Description
  id: S15
  inputs:
    sql: " \n select\n  -- Required Columns\n  'arn:' || a.partition || ':::' || a.account_id\
      \ as resource,\n  case\n    when\n      minimum_password_length >= 14\n    \
      \  and password_reuse_prevention >= 5\n      and require_lowercase_characters\
      \ = 'true'\n      and require_uppercase_characters = 'true'\n      and require_numbers\
      \ = 'true'\n      and max_password_age <= 90\n    then 'ok'\n    else 'alarm'\n\
      \  end status,\n  case\n    when minimum_password_length is null then 'No password\
      \ policy set.'\n    when\n      minimum_password_length >= 14\n      and password_reuse_prevention\
      \ >= 5\n      and require_lowercase_characters = 'true'\n      and require_uppercase_characters\
      \ = 'true'\n      and require_numbers = 'true'\n      and max_password_age <=\
      \ 90\n    then 'Strong password policies configured.'\n    else 'Strong password\
      \ policies not configured.'\n  end reason,\n  -- Additional Dimensions\n  a.account_id\n\
      from\n  aws_account as a\n  left join aws_iam_account_password_policy as pol\
      \ on a.account_id = pol.account_id;\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S16
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S15.output.rows if ( x[context.steps.S15.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S15.output.rows

      check.name = "8 Password policies for IAM users should have strong configurations"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- desc: ' '
  text: '# Send Report to communication channel'
- action: core.python
  desc: Description
  id: FormatResult
  inputs:
    code: "from dotmap import DotMap\nfrom datetime import date\nimport json\n\ntoday\
      \ = \"*\" + str(date.today()) +\"*\"\n\nmessage_blocks = []\nexecution_url =\
      \ context.server_environment_url + \"/workspace/\" + context.workspace_id +\
      \ \"/playbooks/library/playbook?id=\" + context.playbook_id + \"&execution=\"\
      \ + context.execution_id \nheader = {\"type\": \"header\", \"text\": {\"type\"\
      : \"plain_text\",\"text\": \":speaker:  pci_v321_iam  :speaker:\"}}\ncontext_section\
      \ = {\"type\":\"context\",\"elements\":[{\"text\": today+\" |  pci_v321_iam\
      \ Check results \",\"type\":\"mrkdwn\"}]}\nblink_execution = {\"type\":\"section\"\
      ,\"text\":{\"text\": \":point_right: <\" + execution_url + \"| *Full report\
      \ available in Blink*>\" ,\"type\":\"mrkdwn\"}}\nmessage_blocks.append(header)\n\
      message_blocks.append(context_section)\nmessage_blocks.append(blink_execution)\n\
      \nstep_ids = ['S2', 'S4', 'S6', 'S8', 'S10', 'S12', 'S14', 'S16']\nfor id in\
      \ step_ids:\n  if context.steps[id].status == 'OK':\n    message_blocks.append({\"\
      type\":\"divider\"})\n    \n    section = DotMap()\n    section.type = \"section\"\
      \n    section.text = DotMap()\n    section.text.type = \"mrkdwn\"\n    section.text.text\
      \ = \"\"\n    if context.steps[id].output.isAlarm:\n      section.text.text\
      \ +=  \":x: \"\n    else:\n       section.text.text +=  \":white_check_mark:\
      \ \"\n    \n    section.text.text += context.steps[id].output.name[:82] + \"\
      \\n\" if len(context.steps[id].output.name) > 82 else context.steps[id].output.name\n\
      \    \n\n    message_blocks.append(section.toDict().copy())\n\n  \nprint(json.dumps(message_blocks))"
  name: Format Final Result
- action: slack.SendMessage
  connections:
    slack: slack_connection
  id: SendResult
  inputs:
    Blocks: '{{steps.FormatResult.output}}'
    Channel: random
    Text: ''
  name: Send report to clack channel
  when: '{{inputs.send_notif}}'
tags:
- AWS
- Compliance
- pci_v321
- iam
type: Subflow.playbook
