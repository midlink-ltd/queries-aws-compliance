connections:
  aws: aws_connection
desc: ''
name: foundational_security_config
steps:
- desc: example description delete afterwards
  description: This control checks whether AWS Config is enabled in the account for
    the local Region and is recording all resources. The AWS Config service performs
    configuration management of supported AWS resources in your account and delivers
    log files to you. The recorded information includes the configuration item (AWS
    resource), relationships between configuration items, and any configuration changes
    between resources.
  text: '#1 AWS Config should be enabled'
- action: core.sql
  desc: Description
  id: S1
  inputs:
    sql: " \n -- pgFormatter-ignore\n\nselect\n  -- Required columns\n  'arn:aws::'\
      \ || a.region || ':' || a.account_id as resource,\n  case\n    when\n      json_extract(recording_group,'$.IncludeGlobalResourceTypes')\
      \ = 'true'\n      and json_extract(recording_group,'$.AllSupported') = 'true'\n\
      \      and json_extract(status,'$.Recording') = 'true'\n      and json_extract(status,'$.LastStatus')\
      \ = 'SUCCESS'\n    then 'ok'\n    else 'alarm'\n  end as status,\n  case\n \
      \   when json_extract(recording_group,'$.IncludeGlobalResourceTypes') = 'true'\
      \ then a.region || ' IncludeGlobalResourceTypes enabled,'\n    else a.region\
      \ || ' IncludeGlobalResourceTypes disabled,'\n  end ||\n  case\n    when json_extract(recording_group,'$.AllSupported')\
      \ = 'true' then ' AllSupported enabled,'\n    else ' AllSupported disabled,'\n\
      \  end ||\n  case\n    when json_extract(status,'$.Recording') = 'true' then\
      \ ' Recording enabled'\n    else ' Recording disabled'\n  end ||\n  case\n \
      \   when json_extract(status,'$.LastStatus') = 'SUCCESS' then ' and LastStatus\
      \ is SUCCESS.'\n    else ' and LastStatus is not SUCCESS.'\n  end as reason,\n\
      \  -- Additional columns\n  a.region,\n  a.account_id\nfrom\n  aws_region as\
      \ a\n  left join aws_config_configuration_recorder as r on r.region = a.name;\n"
  name: Perform the query
- action: core.python
  desc: Description
  id: S2
  inputs:
    code: 'from dotmap import DotMap

      import json

      filtered_on_alarm = [x for x in context.steps.S1.output.rows if ( x[context.steps.S1.output.columns.index(''status'')]
      == ''alarm'' )]


      check = DotMap()


      check.isAlarm = len(filtered_on_alarm) > 0

      check.details = context.steps.S1.output.rows

      check.name = "#1 AWS Config should be enabled"

      check.severity = "medium"


      print(json.dumps(check.toDict()))'
  name: Format Result
- action: core.python
  desc: Description
  id: FormatResult
  inputs:
    code: "from dotmap import DotMap\nfrom datetime import date\nimport json\n\ntoday\
      \ = \"*\" + str(date.today()) +\"*\"\n\nmessage_blocks = []\nheader = {\"type\"\
      : \"header\", \"text\": {\"type\": \"plain_text\",\"text\": \":speaker:  foundational_security_config\
      \  :speaker:\"}}\ncontext_section = {\"type\":\"context\",\"elements\":[{\"\
      text\": today+\" |  foundational_security_config Check results \",\"type\":\"\
      mrkdwn\"}]}\n\nmessage_blocks.append(header)\nmessage_blocks.append(context_section)\n\
      \nstep_ids = ['S2']\nfor id in step_ids:\n  if context.steps[id].status == 'OK':\n\
      \    message_blocks.append({\"type\":\"divider\"})\n    \n    section = DotMap()\n\
      \    section.type = \"section\"\n    section.text = DotMap()\n    section.text.type\
      \ = \"mrkdwn\"\n    section.text.text = \"\"\n    if context.steps[id].output.isAlarm:\n\
      \      section.text.text +=  \":x: \"\n    else:\n       section.text.text +=\
      \  \":white_check_mark: \"\n    \n    section.text.text += context.steps[id].output.name[:82]\
      \ + \"\\n\"\n    \n\n    message_blocks.append(section.toDict().copy())\n\n\
      \  \nprint(json.dumps(message_blocks))"
  name: Format Final Result
- action: slack.SendMessage
  connectiuon:
    slack: slack_connection
  id: SendResult
  inputs:
    Blocks: '{{steps.FormatResult.output}}'
    Channel: jon-demo
    Text: ''
  name: Send report to clack channel
tags: []
type: Flow
