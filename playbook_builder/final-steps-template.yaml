steps:
  - text: "# Send Report to communication channel"
    desc: " "
  - action: core.python
    id: FormatResult
    name: Format Final Result
    desc: Description
    inputs:
      code: >-
        from dotmap import DotMap

        from datetime import date

        import json


        today = "*" + str(date.today()) +"*"


        message_blocks = []

        execution_url = context.server_environment_url + "/workspace/" + context.workspace_id + "/playbooks/library/playbook?id=" + context.playbook_id + "&execution=" + context.execution_id 

        header = {"type": "header", "text": {"type": "plain_text","text": ":speaker:  BenchmarkName  :speaker:"}}

        context_section = {"type":"context","elements":[{"text": today+" |  BenchmarkName Check results ","type":"mrkdwn"}]}

        blink_execution = {"type":"section","text":{"text": ":point_right: <" + execution_url + "| *Full report available in Blink*>" ,"type":"mrkdwn"}}

        message_blocks.append(header)

        message_blocks.append(context_section)

        message_blocks.append(blink_execution)


        step_ids = GeneratedStepsIds

        for id in step_ids:
          if context.steps[id].status == 'OK':
            message_blocks.append({"type":"divider"})
            
            section = DotMap()
            section.type = "section"
            section.text = DotMap()
            section.text.type = "mrkdwn"
            section.text.text = ""
            if context.steps[id].output.isAlarm:
              section.text.text +=  ":x: "
            else:
               section.text.text +=  ":white_check_mark: "
            
            section.text.text += context.steps[id].output.name[:82] + "\n"
            

            message_blocks.append(section.toDict().copy())

          
        print(json.dumps(message_blocks))
  
  - action: slack.SendMessage
    id: SendResult
    name: Send report to clack channel
    connections:
      slack: slack_connection
    inputs:
      Channel: random
      Text: ""
      Blocks: "{{steps.FormatResult.output}}"
    when: "{{inputs.send_notif}}"
